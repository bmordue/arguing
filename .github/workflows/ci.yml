name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Code Quality Gates
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for TypeScript compilation errors
      run: npm run prestart
      
    - name: Run linting
      run: npm run lint
      continue-on-error: false
      
    - name: Check code formatting
      run: npm run format:check
      continue-on-error: false

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run prestart
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run dependency vulnerability scan
      run: |
        npx audit-ci --config ./audit-ci.json || exit 0

  # Build and Deployment Health Checks  
  deployment-health:
    name: Deployment Health Checks
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run prestart
      
    - name: Verify build artifacts
      run: |
        if [ ! -f "built/app.js" ]; then
          echo "Build failed: app.js not found"
          exit 1
        fi
        echo "Build artifacts verified successfully"
        
    - name: Test application startup
      run: |
        # Copy example file as test data
        cp example_graph.json graph.json
        # Test application startup with timeout
        timeout 10s npm start || if [ $? -eq 124 ]; then
          echo "Application started successfully (timed out as expected)"
        else
          echo "Application failed to start"
          exit 1
        fi
        
    - name: Verify database creation
      run: |
        if [ -f "arguing.sqlite" ]; then
          echo "Database created successfully"
          # Basic database integrity check
          sqlite3 arguing.sqlite "SELECT COUNT(*) FROM sqlite_master WHERE type='table';" > /dev/null
          echo "Database integrity verified"
        else
          echo "Warning: Database not created, but application may work with different input"
        fi
        
    - name: Check file permissions and structure
      run: |
        echo "Verifying project structure..."
        [ -d "built" ] && echo "✓ Built directory exists"
        [ -f "package.json" ] && echo "✓ Package.json exists"
        [ -f "tsconfig.json" ] && echo "✓ TypeScript config exists"
        echo "Project structure verification complete"